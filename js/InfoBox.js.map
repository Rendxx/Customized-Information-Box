{"version":3,"sources":["InfoBox.js"],"names":[],"mappingsfile":"InfoBox.js","sourcesContent":["/************************************************ \r\nCustomized Information Box\r\nCopyright (c) 2014-2015 Dongxu Ren  http://www.rendxx.com/\r\n\r\nLicense: MIT (http://www.opensource.org/licenses/mit-license.php)\r\nVersion: 0.6.0\r\nUpdate: 2015-12-04\r\n\r\nDescription:\r\n    Enable user to show their customized HTML elements in the center of screen.\r\n        - A screen cover will be created to block mouse event to the original page.\r\n        - Clicking outside the body of the info-box will close the info-box. This feature can be disabled manually.\r\n\r\n    CSS3 is used. \r\n    \r\nCompatibility:\r\n    Fully support Chrome; Fire Fox; Safari; Edge; IE 10-11; \r\n    Half support: IE9\r\n    Limit support: IE 7,8;\r\n \r\nDependency:\r\n    jQuery\r\n\r\nAPI:\r\n    $$.info(ele, hideOnClick, bgColor, onHide)\r\n    $$.info.show(ele, hideOnClick, bgColor, onHide)\r\n        - ele: info-window jQuery element\r\n        - hideOnClick: close when click on the background if true\r\n        - bgColor: background color in (rr,gg,bb,aa)\r\n        - onHide: callback function when info-window hide\r\n            \r\n    $$.info.hide()\r\n        close the info box if it is shown\r\n\r\n    $$.info.alert(content, title, hideOnClick, bgColor, callback)\r\n        - content: alert content\r\n        - title: alert title\r\n        - callback: function be called after click OK\r\n\r\n    $$.info.check(content, title, hideOnClick, bgColor, callbackYes, callbackNo) \r\n        - callbackYes: function be called after click YES\r\n        - callbackNo: function be called after click NO\r\n        \r\n    $$.info.alert2(content, title, hideOnClick, bgColor, callback)\r\n        - Breif Line style\r\n\r\n    $$.info.check2(content, title, hideOnClick, bgColor, callbackYes, callbackNo) \r\n        - Breif Line style\r\n\r\nPreset API:\r\n    These API are only used in preset infobox.\r\n\r\n    this.loaded\r\n        - boolean indicate whether the preset has been loaded or not\r\n\r\n    this.cssClass\r\n        - css class name of the preset\r\n        - this name is automatically created by the name of the preset\r\n\r\n    this.css\r\n        - css object of the preset\r\n        - the structure follow the rules almost as same as the css object in $, expect you can set a hover style with \"[class name]:hover\"\r\n\r\n    this.html\r\n        - html string\r\n\r\n    this.buildEle (htmlStr) \r\n        - create the $ element used to build the infobox\r\n        - the parameter [htmlStr] should contain all content needed\r\n        - It is highly suggested to create the $ element with it. Otherwise you have to deal with all the pre-work by yourself.\r\n\r\n    this.show (ele, hideOnClick, bgColor, onHide)\r\n        - as same as the $$.info.show function\r\n    this.hide (e)\r\n        - hide the info box \r\n        - e is the event argument passed into a click function, pass it into the hide function as well\r\n\r\n\r\n\r\n************************************************/\r\n\r\n(function () {\r\n    var InfoBox = function ($$) {\r\n        var that = this,\r\n            _onHide = null,         // callback fired after hide this info box\r\n            _focusEle = null,       // the element focus before showing info box. This is used to recover focus.\r\n            _html = {},             // html elements \r\n\r\n            // flag\r\n            _isSetuped = false,      // whether the info box html has setuped\r\n            _isShown = false,        // whether the info box is shown or not\r\n            _transitionEnd = true;   // css3 transition end callback name, null means not available\r\n\r\n        // -------------------------------------------------------------------------------------------------------------\r\n\r\n        // Show information-box\r\n        var show = function (content, hideOnClick, bgColor, onHide) {\r\n            htmlSetup();\r\n\r\n            // callback hide\r\n            _onHide = onHide;\r\n\r\n            // handle the focus element\r\n            _focusEle = $(document.activeElement);\r\n\r\n            // reset basic element\r\n            _html[\"container\"].html(\"\");\r\n            animateSetup();\r\n\r\n            // Set background\r\n            if (bgColor == null) {\r\n                _html[\"bg\"].css(\"background-color\", \"rgba(0,0,0,0)\");\r\n            } else {\r\n                _html[\"bg\"].css(\"background-color\", bgColor);\r\n            }\r\n\r\n            // handle main content and make it vertical center\r\n            _html[\"content\"] = content;\r\n            _html[\"container\"].css('height', '100%');\r\n            content.appendTo(_html[\"container\"]);\r\n            content.css('margin', '0 auto');\r\n            _html[\"container\"].css('height', 'auto');\r\n            var h = _html[\"container\"].height();\r\n            _html[\"container\"].height(h);\r\n            _html[\"container\"].css(\"margin-top\", \"-\" + (h / 2) + \"px\");\r\n\r\n            // stop propagation when click on the box\r\n            content.click(function (e) {\r\n                if (e.stopPropagation)\r\n                    e.stopPropagation();\r\n                else\r\n                    e.cancelBubble = true;\r\n            });\r\n\r\n            // Bind/Unbind mouse event on background\r\n            _html[\"wrap\"].unbind(\"click\");\r\n            if (hideOnClick) _html[\"wrap\"].click(hide);\r\n\r\n            // show the box\r\n            _isShown = true;\r\n            animateShow()\r\n\r\n            _html[\"wrap\"].focus();\r\n        };\r\n\r\n        // Hide information-box\r\n        var hide = function () {\r\n            if (!_isShown) return;\r\n            _isShown = false;            \r\n            _html[\"wrap\"].unbind(\"click\"); // unbind function            \r\n            animateHide(); // hide the box\r\n            if (_focusEle) _focusEle.focus(); // handle the focus element\r\n            _focusEle = null;\r\n\r\n            if (_onHide != null) setTimeout(_onHide, 1); // callback hide\r\n        };\r\n\r\n        // html animate handle --------------------------------------------------\r\n        // setup css for showing\r\n        var animateSetup = function () {\r\n            if (_transitionEnd!=null) {\r\n                _html[\"wrap\"][0].removeEventListener(_transitionEnd, hideWrap, false);\r\n                _html[\"wrap\"].css({\r\n                    'display': 'block',\r\n                    'opacity': 0,\r\n                    '-moz-transition': '0',\r\n                    '-o-transition': '0',\r\n                    '-webkit-transition': '0',\r\n                    'transition': '0'\r\n                });\r\n            } else {\r\n                _html[\"wrap\"].css({\r\n                    'display': 'block',\r\n                    'visibility': 'hidden'\r\n                });\r\n            }\r\n        };\r\n\r\n        // show the info-box\r\n        var animateShow = function () {\r\n            if (_transitionEnd!=null) {\r\n                _html[\"wrap\"].css({\r\n                    'opacity': 1,\r\n                    '-moz-transition': '0.2s',\r\n                    '-o-transition': '0.2s',\r\n                    '-webkit-transition': '0.2s',\r\n                    'transition': '0.2s'\r\n                });\r\n            } else {\r\n                _html[\"wrap\"].css({\r\n                    'visibility': 'visible',\r\n                    'display': 'none'\r\n                }).fadeIn(200);\r\n            }\r\n        };\r\n\r\n        // hide the info-box\r\n        var animateHide = function () {\r\n            if (_transitionEnd!=null) {\r\n                _html[\"wrap\"].css({\r\n                    \"opacity\": 0,\r\n                    '-moz-transition': '0.2s',\r\n                    '-o-transition': '0.2s',\r\n                    '-webkit-transition': '0.2s',\r\n                    'transition': '0.2s'\r\n                });\r\n                _html[\"wrap\"][0].addEventListener(_transitionEnd, hideWrap, false);\r\n            } else {\r\n                _html[\"wrap\"].fadeOut(200);\r\n            }\r\n        };\r\n\r\n        var hideWrap = function () {\r\n            if (!_isShown) _html[\"wrap\"].css({\r\n                \"display\": \"none\"\r\n            });\r\n        };\r\n\r\n        // Add Basic elements into Dom-tree\r\n        // this should only run once\r\n        var htmlSetup = function () {\r\n            if (_isSetuped) return;\r\n            _isSetuped = true;\r\n\r\n            // Setup elements of information box\r\n            _html[\"wrap\"] = $('<div tabindex=\"-1\" class=\"r-info\" style=\"width:100%; height:100%; display:none; position:fixed; left:0px; top:0px; z-index:99990; margin:0px; padding:0px; border:0px; outline: none!important; outline-width: 0!important;\"></div>').appendTo($(\"body\"));\r\n            _html[\"container\"] = $('<div style=\"position:fixed; left:0px; top:50%; z-index:2; width:100%; height:100%;\"></div>').appendTo(_html[\"wrap\"]);\r\n            _html[\"bg\"] = $('<div style=\"position:fixed; left:0px; top:0px; z-index:1; width:100%; height:100%;\"></div>').appendTo(_html[\"wrap\"]);\r\n\r\n            // check transition end callback, null means transition not available\r\n            _transitionEnd = (function () {\r\n                var el = document.createElement('div');\r\n                var transEndEventNames = {\r\n                    'WebkitTransition': 'webkitTransitionEnd',\r\n                    'MozTransition': 'transitionend',\r\n                    'OTransition': 'oTransitionEnd otransitionend',\r\n                    'transition': 'transitionend'\r\n                };\r\n\r\n                for (var name in transEndEventNames) {\r\n                    if (el.style[name] !== undefined) {\r\n                        return transEndEventNames[name];\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            })();\r\n        };\r\n\r\n        // Initialize \r\n        var init = function () {\r\n            $$.info = function (content, hideOnClick, bgColor, onHide) {\r\n                show(content, hideOnClick, bgColor, onHide);\r\n            };\r\n            $$.info.hide = hide;\r\n            $$.info.show = show;\r\n        };\r\n        init();\r\n    };\r\n    var infobox = new InfoBox(window.$$ = window.$$ || {});\r\n})();"],"sourceRoot":"/source/"}